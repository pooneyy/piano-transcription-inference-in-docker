name: Build Docker image

on:
  push:
    tags: "*"

permissions:
  contents: read
  packages: write
  id-token: write
  attestations: write

env:
  ARCHITECTURES: linux/amd64
  IMAGE_NAME: piano_transcription_inference
  IMAGE_DESCRIPTION: Built by GitHub Actions, the associated workflow is https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
  LICENSES: MIT

jobs:
  publish-image:
    strategy:
      matrix:
        include:
          - runs-on: ubuntu-latest
            base_image: python:3.7
            commands: >-
              pip install torch==1.4.0+cpu torchvision==0.5.0+cpu -f https://download.pytorch.org/whl/torch_stable.html
            torch_version: pytorch-1.4.0-cpu
            version: PyTorch 1.4.0 CPU

          - runs-on: ubuntu-latest
            base_image: pytorch/pytorch:1.4-cuda10.1-cudnn7-runtime
            commands: 
            torch_version: pytorch-1.4.0-cuda-10.1
            version: PyTorch 1.4.0 CUDA 10.1

          - runs-on: ubuntu-latest
            base_image: pytorch/pytorch:1.9.0-cuda10.2-cudnn7-runtime
            commands: 
            torch_version: pytorch-1.9.0-cuda-10.2
            version: PyTorch 1.9.0 CUDA 10.2

          - runs-on: ubuntu-latest
            base_image: pytorch/pytorch:1.7.1-cuda11.0-cudnn8-runtime
            commands: 
            torch_version: pytorch-1.7.1-cuda-11.0
            version: PyTorch 1.7.1 CUDA 11.0

          - runs-on: self-hosted
            base_image: pytorch/pytorch:1.9.1-cuda11.1-cudnn8-runtime
            commands: 
            torch_version: pytorch-1.9.1-cuda-11.1
            version: PyTorch 1.9.1 CUDA 11.1

          - runs-on: ubuntu-latest
            base_image: pytorch/pytorch:1.12.1-cuda11.3-cudnn8-runtime
            commands: 
            torch_version: pytorch-1.12.1-cuda-11.3
            version: PyTorch 1.12.1 CUDA 11.3

          - runs-on: self-hosted
            base_image: pytorch/pytorch:1.13.1-cuda11.6-cudnn8-runtime
            commands: >-
              pip install numpy==1.23
            torch_version: pytorch-1.13.1-cuda-11.6
            version: PyTorch 1.13.1 CUDA 11.6

          - runs-on: ubuntu-latest
            base_image: pytorch/pytorch:2.0.1-cuda11.7-cudnn8-runtime
            commands: 
            torch_version: pytorch-2.0.1-cuda-11.7
            version: PyTorch 2.0.1 CUDA 11.7

          - runs-on: ubuntu-latest
            base_image: pytorch/pytorch:2.5.1-cuda11.8-cudnn9-runtime
            commands: 
            torch_version: pytorch-2.5.1-cuda-11.8
            version: PyTorch 2.5.1 CUDA 11.8

          - runs-on: ubuntu-latest
            base_image: pytorch/pytorch:2.5.1-cuda12.1-cudnn9-runtime
            commands: 
            torch_version: pytorch-2.5.1-cuda-12.1
            version: PyTorch 2.5.1 CUDA 12.1

          - runs-on: ubuntu-latest
            base_image: pytorch/pytorch:2.5.1-cuda12.4-cudnn9-runtime
            commands: 
            torch_version: pytorch-2.5.1-cuda-12.4
            version: PyTorch 2.5.1 CUDA 12.4

          - runs-on: self-hosted
            base_image: pytorch/pytorch:2.8.0-cuda12.6-cudnn9-runtime
            commands: 
            torch_version: pytorch-2.8.0-cuda-12.6
            version: PyTorch 2.8.0 CUDA 12.6

          - runs-on: self-hosted
            base_image: pytorch/pytorch:2.8.0-cuda12.8-cudnn9-runtime
            commands: 
            torch_version: pytorch-2.8.0-cuda-12.8
            version: PyTorch 2.8.0 CUDA 12.8

          - runs-on: self-hosted
            base_image: pytorch/pytorch:2.8.0-cuda12.9-cudnn9-runtime
            commands: 
            torch_version: pytorch-2.8.0-cuda-12.9
            version: PyTorch 2.8.0 CUDA 12.9

          - runs-on: ubuntu-latest
            base_image: pytorch/pytorch:2.9.0-cuda13.0-cudnn9-runtime
            commands: 
            torch_version: pytorch-2.9.0-cuda-13.0
            version: PyTorch 2.9.0 CUDA 13.0

          # - runs-on: self-hosted
          #   base_image: 
          #   commands: >-
              
          #   torch_version: 
          #   version: 

    name: Build and publish (${{ matrix.version }})
    runs-on: ${{ matrix.runs-on }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Set env
        run: |
          owner=$(echo '${{ github.repository_owner }}' | tr '[:upper:]' '[:lower:]')
          echo "OWNER=$owner" >> "$GITHUB_ENV"
          echo "IMAGE_FULL_NAME=ghcr.io/$owner/${{ env.IMAGE_NAME }}" >> $GITHUB_ENV
          current_version=$(git describe --tags --always)
          echo "current version: $current_version"
          echo "IMAGE_TAG=${current_version}-${{ matrix.torch_version }}" >> $GITHUB_ENV

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ env.OWNER }}
          password: ${{ github.token }}

      - name: Extract metadata (tags, labels) for image registry
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_FULL_NAME }}
          annotations: |
            org.opencontainers.image.description=${{ env.IMAGE_DESCRIPTION }}
            org.opencontainers.image.licenses=${{ env.LICENSES }}
            org.opencontainers.image.title=${{ env.IMAGE_NAME }}
            org.opencontainers.image.version=${{ env.IMAGE_TAG }}
          labels: |
            org.opencontainers.image.description=${{ env.IMAGE_DESCRIPTION }}
            org.opencontainers.image.licenses=${{ env.LICENSES }}
            org.opencontainers.image.title=${{ env.IMAGE_NAME }}
            org.opencontainers.image.version=${{ env.IMAGE_TAG }}
        env:
          DOCKER_METADATA_ANNOTATIONS_LEVELS: manifest,index

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build
        uses: docker/build-push-action@v6
        with:
          build-args: |
            BASE_IMAGE=${{ matrix.base_image }}
            COMMANDS=${{ matrix.commands }}
          context: .
          push: false
          load: true
          tags: |
            ${{ env.IMAGE_FULL_NAME }}:${{ env.IMAGE_TAG }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: ${{ env.ARCHITECTURES }}

      - name: Run tests on built image
        run: |
          docker run --rm ${{ env.IMAGE_FULL_NAME }}:${{ env.IMAGE_TAG }} sh -c "wget --no-verbose -O example.mp3 https://raw.githubusercontent.com/qiuqiangkong/piano_transcription_inference/refs/heads/master/resources/cut_liszt.mp3 && python3 main.py --audio_path='example.mp3' --output_midi_path='example.mid'" 
          docker rmi -f ${{ env.IMAGE_FULL_NAME }}:${{ env.IMAGE_TAG }}

      - name: Build and push
        uses: docker/build-push-action@v6
        env:
          DOCKER_BUILD_SUMMARY: false
        with:
          build-args: |
            BASE_IMAGE=${{ matrix.base_image }}
            COMMANDS=${{ matrix.commands }}
          context: .
          push: true
          tags: |
            ${{ env.IMAGE_FULL_NAME }}:${{ env.IMAGE_TAG }}
            ${{ env.IMAGE_FULL_NAME }}:latest-${{ matrix.torch_version }}
          annotations: ${{ steps.meta.outputs.annotations }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: ${{ env.ARCHITECTURES }}

      - name: Calculate image size
        run: |
          docker manifest inspect ${{ env.IMAGE_FULL_NAME }}:${{ env.IMAGE_TAG }} -v > manifest.json
          curl -o ./get_image_size.sh -s https://raw.githubusercontent.com/pooneyy/1Panel-Appstore/refs/heads/script/get_image_size.sh
          chmod +x get_image_size.sh

      - name: Get the package id
        run: |
          gh auth login --with-token <<< "${{ github.token }}"
          response=$(gh api \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            /users/${{ env.OWNER }}/packages/container/${{ env.IMAGE_NAME }}/versions)
          version_id=$(echo "$response" | jq -r '.[] | select(.metadata.container.tags[]? == "${{ env.IMAGE_TAG }}") | .id')
          echo "VERSION_ID=$version_id" >> $GITHUB_ENV

      - name: Add a summary for the job
        run: |
          arch_array=($(echo ${{ env.ARCHITECTURES }} | tr -d '"' | tr ',' '\n' | tr -d ' '))
          echo "## ${{ github.event.inputs.task_description }}" >> $GITHUB_STEP_SUMMARY
          echo "## Build Report" >> $GITHUB_STEP_SUMMARY
          echo "### Get the image" >> $GITHUB_STEP_SUMMARY
          echo '<pre lang="bash">' >> $GITHUB_STEP_SUMMARY
          echo "<code>docker pull ${{ env.IMAGE_FULL_NAME }}:${{ env.IMAGE_TAG }}</code>" >> $GITHUB_STEP_SUMMARY
          echo "</pre>" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Image Url: https://github.com/users/${{ env.OWNER }}/packages/container/${{ env.IMAGE_NAME }}/${{ env.VERSION_ID }}?tag=${{ env.IMAGE_TAG }}" >> $GITHUB_STEP_SUMMARY
          echo "### Image info" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Architecture | Image Size |" >> $GITHUB_STEP_SUMMARY
          echo "|:-:|:-:|" >> $GITHUB_STEP_SUMMARY
          for arch in "${arch_array[@]}"; do
            echo "| $arch | $(./get_image_size.sh --arch $arch) |" >> $GITHUB_STEP_SUMMARY
          done
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "<details><summary><strong>Image manifest</strong></summary>" >> $GITHUB_STEP_SUMMARY
          echo "<pre lang="json"><code>" >> $GITHUB_STEP_SUMMARY
          cat manifest.json >> $GITHUB_STEP_SUMMARY
          echo "</code></pre></details>" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
